=============================================================================
List of generated methods in project: mcu_app

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This method configures registers according to settings of routing and electrical features. It 
                provides pin initialization for selected pins during processor start-up. Selected pins are either user selected 
                pins or pins selected in pin properties in components.  Only pins of devices  enabled for auto initialization 
                are handled within this method.

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_SYS_SetScgConfiguration -Configures SCG module.
   - clockMan1_CLOCK_SYS_SetPccConfiguration -Configures PCC module.
   - clockMan1_CLOCK_SYS_SetSimConfiguration -Configures SIM module.
   - clockMan1_CLOCK_SYS_SetPmcConfiguration -Configures PMC module.
   - clockMan1_CLOCK_SYS_Init -Install pre-defined clock configurations.
   - clockMan1_CLOCK_SYS_UpdateConfiguration -Set system clock configuration according to pre-defined structure.
   - clockMan1_CLOCK_SYS_SetConfiguration -Set system clock configuration.
   - clockMan1_CLOCK_SYS_GetCurrentConfiguration -Get current system clock configuration.
   - clockMan1_CLOCK_SYS_GetErrorCallback -Get the callback which returns error in last clock switch.
   - clockMan1_CLOCK_SYS_GetFreq -Gets the clock frequency for a specific clock name.

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_ClearPending -Clear Pending Interrupt.
   - intMan1_INT_SYS_SetPending -Set Pending Interrupt.
   - intMan1_INT_SYS_GetPending -Get Pending Interrupt.
   - intMan1_INT_SYS_GetActive -Get Active Interrupt.

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "lowFTimer" (component ftm)
   - lowFTimer_FTM_DRV_Init -Initializes the FTM driver.
   - lowFTimer_FTM_DRV_Deinit -Shuts down the FTM driver.
   - lowFTimer_FTM_DRV_InitCounter -Initialize the FTM counter.
   - lowFTimer_FTM_DRV_CounterStart -Starts the FTM counter.
   - lowFTimer_FTM_DRV_CounterStop -Stops the FTM counter.
   - lowFTimer_FTM_DRV_CounterRead -Reads back the current value of the FTM counter.
   - lowFTimer_FTM_DRV_DeinitPwm -Stops all PWM channels configured in param.
   - lowFTimer_FTM_DRV_InitPwm -Configures the duty cycle and frequency and starts outputting the PWM on all channels 
                configured in param .
   - lowFTimer_FTM_DRV_UpdatePwmChannel -This function updates the waveform output in PWM mode (duty cycle and phase).
   - lowFTimer_FTM_DRV_UpdatePwmPeriod -This function will update the period of PWM signal in the channel output.
   - lowFTimer_FTM_DRV_MaskOutputChannels -This function will mask the output of the channels and at match events will be 
                ignored by the masked channels.
   - lowFTimer_FTM_DRV_SetInitialCounterValue -This function configure the initial counter value. The counter will get this 
                value after an overflow event.
   - lowFTimer_FTM_DRV_SetHalfCycleReloadPoint -This function configure the value of the counter which will generates an reload 
                point.
   - lowFTimer_FTM_DRV_SetSoftOutChnValue -This function will force the output value of a channel to a specific value. Before 
                using this function it's mandatory to mask the match events using FTM_DRV_MaskOutputChannels and to enable 
                software output control using FTM_DRV_SetSoftwareOutputChannelControl.
   - lowFTimer_FTM_DRV_SetSoftwareOutputChannelControl -This function will configure which output channel can be software 
                controlled.
   - lowFTimer_FTM_DRV_SetInvertingControl -This function will configure if the second channel of a pair will be inverted or 
                not.
   - lowFTimer_FTM_DRV_SetModuloCounterValue -This function configure the maximum counter value.
   - lowFTimer_FTM_DRV_SetSync -This function configures sync mechanism for some FTM registers ( MOD, CNINT, HCR, CnV, OUTMASK, 
                INVCTRL, SWOCTRL).
   - lowFTimer_FTM_DRV_InitOutputCompare -Configures the FTM to generate timed pulses(Output compare mode).
   - lowFTimer_FTM_DRV_DeinitOutputCompare -Disables compare match output control and clears FTM timer configuration.
   - lowFTimer_FTM_DRV_UpdateOutputCompareChannel -Sets the next compare match value based on the current counter value.
   - lowFTimer_FTM_DRV_InitInputCapture -Configures Channel Input Capture for either getting time-stamps on edge detection or 
                on signal measurement . When the edge specified in the captureMode argument occurs on the channel the FTM 
                counter is captured into the CnV register. The user will have to read the CnV register separately to get this 
                value. The filter function is disabled if the filterVal argument passed in is 0. The filter function is 
                available only on channels 0,1,2,3.
   - lowFTimer_FTM_DRV_DeinitInputCapture -Disables input capture mode and clears FTM timer configuration.
   - lowFTimer_FTM_DRV_GetInputCaptureMeasurement -This function is used to calculate the measurement and/or time stamps values 
                which are read from the C(n, n+1)V registers and stored to the static buffers.
   - lowFTimer_FTM_DRV_StartNewSignalMeasurement -Starts new single-shot signal measurement of the given channel.
   - lowFTimer_FTM_DRV_QuadDecodeStart -Configures the quadrature mode and starts measurement.
   - lowFTimer_FTM_DRV_QuadDecodeStop -De-activates the quadrature decode mode.
   - lowFTimer_FTM_DRV_QuadGetState -Return the current quadrature decoder state (counter value, overflow flag and overflow 
                direction)
   - lowFTimer_FTM_DRV_GetFrequency -Retrieves the frequency of the clock source feeding the FTM counter.
   - lowFTimer_FTM_DRV_ConvertFreqToPeriodTicks -This function is used to covert the given frequency to period in ticks.

Module "lpuart1"   (component lpuart)
   - lpuart1_LPUART_DRV_Init -Initializes an LPUART operation instance.
   - lpuart1_LPUART_DRV_Deinit -Shuts down the LPUART by disabling interrupts and transmitter/receiver.
   - lpuart1_LPUART_DRV_InstallRxCallback -Installs callback function for the LPUART receive.
   - lpuart1_LPUART_DRV_InstallTxCallback -Installs callback function for the LPUART transmit.
   - lpuart1_LPUART_DRV_SendDataBlocking -Sends data out through the LPUART module using a blocking method.
   - lpuart1_LPUART_DRV_SendData -Sends data out through the LPUART module using a non-blocking method. This enables an a-sync 
                method for transmitting data. When used with a non-blocking receive, the LPUART can perform a full duplex 
                operation. Non-blocking means that the function returns immediately. The application has to get the transmit 
                status to know when the transmit is complete.
   - lpuart1_LPUART_DRV_GetTransmitStatus -Returns whether the previous transmit is complete.
   - lpuart1_LPUART_DRV_AbortSendingData -Terminates a non-blocking transmission early.
   - lpuart1_LPUART_DRV_ReceiveDataBlocking -Gets data from the LPUART module by using a blocking method. Blocking means that 
                the function does not return until the receive is complete.
   - lpuart1_LPUART_DRV_ReceiveData -Gets data from the LPUART module by using a non-blocking method. This enables an a-sync 
                method for receiving data. When used with a non-blocking transmission, the LPUART can perform a full duplex 
                operation. Non-blocking means that the function returns immediately. The application has to get the receive 
                status to know when the receive is complete.
   - lpuart1_LPUART_DRV_GetReceiveStatus -Returns whether the previous receive is complete.
   - lpuart1_LPUART_DRV_AbortReceivingData -Terminates a non-blocking receive early.

Module "dmaController1" (component edma)
   - dmaController1_EDMA_DRV_Init -Initializes the eDMA module.
   - dmaController1_EDMA_DRV_Deinit -Shuts down the eDMA module.
   - dmaController1_EDMA_DRV_ChannelInit -Initializes a eDMA channel.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA channel.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA channel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA channel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA channel.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA channel status.
   - dmaController1_EDMA_DRV_PushConfigToReg -Copies the channel configuration to the TCD registers.
   - dmaController1_EDMA_DRV_PushConfigToSTCD -Copies the channel configuration to the software TCD structure.
   - dmaController1_EDMA_DRV_ConfigSingleBlockTransfer -Configures a simple single block data transfer with DMA. This function 
                configures the descriptor for a single block transfer.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in loop mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.

Module "can0_flexcan" (component flexcan)
   - can0_flexcan_FLEXCAN_DRV_SetBitrate -Sets the FlexCAN bit rate.
   - can0_flexcan_FLEXCAN_DRV_SetBitrateCbt -Sets the FlexCAN bit rate for FD BRS.
   - can0_flexcan_FLEXCAN_DRV_GetBitrate -Gets the FlexCAN bit rate.
   - can0_flexcan_FLEXCAN_DRV_SetRxMaskType -Sets the RX masking type.
   - can0_flexcan_FLEXCAN_DRV_SetRxFifoGlobalMask -Sets the FlexCAN RX FIFO global standard or extended mask.
   - can0_flexcan_FLEXCAN_DRV_SetRxMbGlobalMask -Sets the FlexCAN RX MB global standard or extended mask.
   - can0_flexcan_FLEXCAN_DRV_SetRxIndividualMask -Sets the FlexCAN RX individual standard or extended mask.
   - can0_flexcan_FLEXCAN_DRV_Init -Initializes the FlexCAN peripheral.
   - can0_flexcan_FLEXCAN_DRV_Deinit -Shuts down a FlexCAN instance.
   - can0_flexcan_FLEXCAN_DRV_ConfigTxMb -FlexCAN transmit message buffer field configuration.
   - can0_flexcan_FLEXCAN_DRV_SendBlocking -Sends a CAN frame using the specified message buffer, in a blocking manner.
   - can0_flexcan_FLEXCAN_DRV_Send -Sends a CAN frame using the specified message buffer.
   - can0_flexcan_FLEXCAN_DRV_AbortTransfer -Ends a non-blocking FlexCAN transfer early.
   - can0_flexcan_FLEXCAN_DRV_ConfigRxMb -FlexCAN receive message buffer field configuration.
   - can0_flexcan_FLEXCAN_DRV_ConfigRxFifo -FlexCAN RX FIFO field configuration.
   - can0_flexcan_FLEXCAN_DRV_ReceiveBlocking -Receives a CAN frame using the specified message buffer, in a blocking manner.
   - can0_flexcan_FLEXCAN_DRV_Receive -Receives a CAN frame using the specified message buffer.
   - can0_flexcan_FLEXCAN_DRV_RxFifoBlocking -Receives a CAN frame using the message FIFO, in a blocking manner.
   - can0_flexcan_FLEXCAN_DRV_RxFifo -Receives a CAN frame using the message FIFO.
   - can0_flexcan_FLEXCAN_DRV_IRQHandler -Interrupt handler for a FlexCAN instance.
   - can0_flexcan_FLEXCAN_DRV_WakeUpHandler -Wake up handler for a FlexCAN instance.
   - can0_flexcan_FLEXCAN_DRV_GetTransferStatus -Returns whether the previous FLEXCAN transfer has finished.
   - can0_flexcan_FLEXCAN_DRV_InstallEventCallback -Installs a callback function for the IRQ handler.
   - can0_flexcan_FLEXCAN_DRV_ConfigPN -Configures Pretended Networking settings.

Module "lpspiCom"  (component lpspi)
   - lpspiCom_LPSPI_DRV_MasterInit -Initializes a LPSPI instance for interrupt driven master mode operation.
   - lpspiCom_LPSPI_DRV_MasterDeinit -Shuts down a LPSPI instance.
   - lpspiCom_LPSPI_DRV_MasterSetDelay -Configures the LPSPI master mode bus timing delay options.
   - lpspiCom_LPSPI_DRV_MasterConfigureBus -Configures the LPSPI port physical parameters to access a device on the bus when 
                the LSPI instance is configured for interrupt operation.
   - lpspiCom_LPSPI_DRV_MasterTransferBlocking -Performs an interrupt driven blocking SPI master mode transfer.
   - lpspiCom_LPSPI_DRV_MasterTransfer -Performs an interrupt driven non-blocking SPI master mode transfer.
   - lpspiCom_LPSPI_DRV_MasterGetTransferStatus -Returns whether the previous interrupt driven transfer is completed.
   - lpspiCom_LPSPI_DRV_MasterAbortTransfer -Terminates an interrupt driven asynchronous transfer early.
   - lpspiCom_LPSPI_DRV_SlaveInit -Initializes a LPSPI instance for a slave mode operation, using interrupt mechanism.
   - lpspiCom_LPSPI_DRV_SlaveDeinit -Shuts down an LPSPI instance interrupt mechanism.
   - lpspiCom_LPSPI_DRV_SlaveTransferBlocking -Transfers data on LPSPI bus using interrupt and a blocking call.
   - lpspiCom_LPSPI_DRV_SlaveTransfer -Starts the transfer data on LPSPI bus using an interrupt and a non-blocking call.
   - lpspiCom_LPSPI_DRV_SlaveAbortTransfer -Aborts the transfer that started by a non-blocking call transfer function.
   - lpspiCom_LPSPI_DRV_SlaveGetTransferStatus -Returns whether the previous transfer is finished.

Module "gpio"      (component gpio_hal)
   - gpio_GPIO_HAL_WritePin -Write a pin of a port with a given value.
   - gpio_GPIO_HAL_WritePins -Write all pins of a port.
   - gpio_GPIO_HAL_GetPinsOutput -Get the current output from a port.
   - gpio_GPIO_HAL_SetPins -Write pins with 'Set' value.
   - gpio_GPIO_HAL_ClearPins -Write pins to 'Clear' value.
   - gpio_GPIO_HAL_TogglePins -Toggle pins value.
   - gpio_GPIO_HAL_ReadPins -Read input pins.
   - gpio_GPIO_HAL_GetPinsDirection -Get the pins directions configuration for a port.
   - gpio_GPIO_HAL_SetPinDirection -Configure the direction for a certain pin from a port.
   - gpio_GPIO_HAL_SetPinsDirection -Set the pins directions configuration for a port.
   - gpio_GPIO_HAL_SetPortInputDisable -Set the pins input disable state for a port.
   - gpio_GPIO_HAL_GetPortInputDisable -Get the pins input disable state for a port.

Module "port1"     (component port_hal)
   - port1_PORT_HAL_SetPullSel -Configures the internal resistor.
   - port1_PORT_HAL_SetPassiveFilterMode -Configures the passive filter if the pin is used as a digital input.
   - port1_PORT_HAL_SetDriveStrengthMode -Configures the drive strength if the pin is used as a digital output.
   - port1_PORT_HAL_SetMuxModeSel -Configures the pin muxing.
   - port1_PORT_HAL_SetPinCtrlLockMode -Locks or unlocks the pin control register bits[15:0].
   - port1_PORT_HAL_SetDigitalFilterMode -Enables or disables the digital filter in one single port. Each bit of the 32-bit 
                register represents one pin.
   - port1_PORT_HAL_SetDigitalFilterClock -Configures the clock source for the digital input filters. Changing the filter clock 
                source should only be done after disabling all enabled filters. Every pin in one port uses the same clock 
                source.
   - port1_PORT_HAL_SetDigitalFilterWidth -Configures the maximum size of the glitches (in clock cycles) that the digital 
                filter absorbs for enabled digital filters. Glitches that are longer than this register setting (in clock 
                cycles) pass through the digital filter, while glitches that are equal to or less than this register setting 
                (in clock cycles) are filtered. Changing the filter length should only be done after disabling all enabled 
                filters.
   - port1_PORT_HAL_SetLowGlobalPinCtrlCmd -Configures the low half of the pin control register for the same settings. This 
                function operates pin 0 -15 of one specific port.
   - port1_PORT_HAL_SetHighGlobalPinCtrlCmd -Configures the high half of pin control register for the same settings. This 
                function operates pin 16 -31 of one specific port.
   - port1_PORT_HAL_SetPinIntSel -Configures the port pin interrupt/DMA request.
   - port1_PORT_HAL_GetPinIntSel -Gets the current port pin interrupt/DMA request configuration.
   - port1_PORT_HAL_GetPinIntMode -Reads the individual pin-interrupt status flag.
   - port1_PORT_HAL_ClearPinIntFlagCmd -Clears the individual pin-interrupt status flag.
   - port1_PORT_HAL_GetPortIntFlag -Reads the entire port interrupt status flag.
   - port1_PORT_HAL_ClearPortIntFlagCmd -Clears the entire port interrupt status flag.

Module "adc0"      (component adc)
   - adc0_ADC_DRV_InitConverterStruct -Initializes the converter configuration structure.
   - adc0_ADC_DRV_ConfigConverter -Configures the converter with the given configuration structure.
   - adc0_ADC_DRV_GetConverterConfig -Gets the current converter configuration.
   - adc0_ADC_DRV_Reset -Resets the converter (sets all configurations to reset values)
   - adc0_ADC_DRV_WaitConvDone -Waits for a conversion/calibration to finish.
   - adc0_ADC_DRV_InitHwCompareStruct -Initializes the Hardware Compare configuration structure.
   - adc0_ADC_DRV_ConfigHwCompare -Configures the Hardware Compare feature with the given configuration structure.
   - adc0_ADC_DRV_GetHwCompareConfig -Gets the current Hardware Compare configuration.
   - adc0_ADC_DRV_InitHwAverageStruct -Initializes the Hardware Average configuration structure.
   - adc0_ADC_DRV_ConfigHwAverage -Configures the Hardware Average feature with the given configuration structure.
   - adc0_ADC_DRV_GetHwAverageConfig -Gets the current Hardware Average configuration.
   - adc0_ADC_DRV_InitChanStruct -Initializes the control channel configuration structure
   - adc0_ADC_DRV_ConfigChan -Configures the selected control channel with the given configuration structure
   - adc0_ADC_DRV_GetChanConfig -Gets the current control channel configuration for the selected channel index
   - adc0_ADC_DRV_GetChanResult -Gets the last result for the selected control channel
   - adc0_ADC_DRV_AutoCalibration -Executes an Auto-Calibration.
   - adc0_ADC_DRV_InitUserCalibrationStruct -Initializes the User Calibration configuration structure.
   - adc0_ADC_DRV_ConfigUserCalibration -Configures the User Calibration feature with the given configuration structure.
   - adc0_ADC_DRV_GetUserCalibration -Gets the current User Calibration configuration.
   - adc0_ADC_DRV_GetInterruptNumber -Returns the interrupt number for the ADC instance.
   - adc0_ADC_DRV_ClearLatchedTriggers -Clear latched triggers under processing.
   - adc0_ADC_DRV_ClearTriggerErrors -Clear all latch trigger error.
   - adc0_ADC_DRV_GetTriggerErrorFlags -This function returns the trigger error flags bits of the ADC instance.

Module "watchdog1" (component wdog)
   - watchdog1_WDOG_DRV_Init -Initializes the WDOG driver.
   - watchdog1_WDOG_DRV_Deinit -De-initializes the WDOG driver.
   - watchdog1_WDOG_DRV_GetConfig -Gets the current configuration of the WDOG.
   - watchdog1_WDOG_DRV_SetInt -Enables/Disables the WDOG timeout interrupt and sets a function to be called when a timeout 
                interrupt is received, before reset.
   - watchdog1_WDOG_DRV_Trigger -Refreshes the WDOG counter.

Module "rtcTimer1" (component rtc)
   - rtcTimer1_RTC_DRV_Init -Initialize RTC instance.
   - rtcTimer1_RTC_DRV_Deinit -Deinitialize RTC instance.
   - rtcTimer1_RTC_DRV_StartCounter -Start RTC instance counter. Before calling this function the user should use 
                RTC_DRV_SetTimeDate to configure the start time.
   - rtcTimer1_RTC_DRV_StopCounter -Disable RTC instance.
   - rtcTimer1_RTC_DRV_GetCurrentTimeDate -Get current time and date from RTC instance.
   - rtcTimer1_RTC_DRV_SetTimeDate -Set time and date for RTC instance. The user must stop the counter before using this 
                function. Otherwise it will return an error.
   - rtcTimer1_RTC_DRV_ConfigureRegisterLock -Configure which registers to lock for RTC instance.
   - rtcTimer1_RTC_DRV_GetRegisterLock -Get which registers are locked for RTC instance.
   - rtcTimer1_RTC_DRV_ConfigureTimeCompensation -Configure compensation for RTC instance.
   - rtcTimer1_RTC_DRV_GetTimeCompensation -Get time compensation for RTC instance.
   - rtcTimer1_RTC_DRV_ConfigureFaultInt -Configure fault interrupts for RTC instance.
   - rtcTimer1_RTC_DRV_ConfigureSecondsInt -Configure seconds interrupts for RTC instance.
   - rtcTimer1_RTC_DRV_ConfigureAlarm -Configure alarm for RTC instance.
   - rtcTimer1_RTC_DRV_GetAlarmConfig -Get alarm configuration for RTC instance.
   - rtcTimer1_RTC_DRV_IsAlarmPending -Check if alarm is pending.
   - rtcTimer1_RTC_DRV_ConvertSecondsToTimeDate -Convert seconds to rtc_timedate_t structure.
   - rtcTimer1_RTC_DRV_ConvertTimeDateToSeconds -Convert seconds to rtc_timedate_t structure.
   - rtcTimer1_RTC_DRV_IsYearLeap -Check if the current year is leap.
   - rtcTimer1_RTC_DRV_IsTimeDateCorrectFormat -Check if the date time struct is configured properly.
   - rtcTimer1_RTC_DRV_GetNextAlarmTime -Gets the next alarm time.
   - rtcTimer1_RTC_DRV_IRQHandler -This method is the API's Interrupt handler for generic and alarm IRQ. It will handle the 
                alarm repetition and calls the user callbacks if they are not NULL.
   - rtcTimer1_RTC_DRV_SecondsIRQHandler -This method is the API's Interrupt handler for RTC Second interrupt. This ISR will 
                call the user callback if defined.

Module "SRSFTimer" (component ftm)
   - SRSFTimer_FTM_DRV_Init -Initializes the FTM driver.
   - SRSFTimer_FTM_DRV_Deinit -Shuts down the FTM driver.
   - SRSFTimer_FTM_DRV_InitCounter -Initialize the FTM counter.
   - SRSFTimer_FTM_DRV_CounterStart -Starts the FTM counter.
   - SRSFTimer_FTM_DRV_CounterStop -Stops the FTM counter.
   - SRSFTimer_FTM_DRV_CounterRead -Reads back the current value of the FTM counter.
   - SRSFTimer_FTM_DRV_DeinitPwm -Stops all PWM channels configured in param.
   - SRSFTimer_FTM_DRV_InitPwm -Configures the duty cycle and frequency and starts outputting the PWM on all channels 
                configured in param .
   - SRSFTimer_FTM_DRV_UpdatePwmChannel -This function updates the waveform output in PWM mode (duty cycle and phase).
   - SRSFTimer_FTM_DRV_UpdatePwmPeriod -This function will update the period of PWM signal in the channel output.
   - SRSFTimer_FTM_DRV_MaskOutputChannels -This function will mask the output of the channels and at match events will be 
                ignored by the masked channels.
   - SRSFTimer_FTM_DRV_SetInitialCounterValue -This function configure the initial counter value. The counter will get this 
                value after an overflow event.
   - SRSFTimer_FTM_DRV_SetHalfCycleReloadPoint -This function configure the value of the counter which will generates an reload 
                point.
   - SRSFTimer_FTM_DRV_SetSoftOutChnValue -This function will force the output value of a channel to a specific value. Before 
                using this function it's mandatory to mask the match events using FTM_DRV_MaskOutputChannels and to enable 
                software output control using FTM_DRV_SetSoftwareOutputChannelControl.
   - SRSFTimer_FTM_DRV_SetSoftwareOutputChannelControl -This function will configure which output channel can be software 
                controlled.
   - SRSFTimer_FTM_DRV_SetInvertingControl -This function will configure if the second channel of a pair will be inverted or 
                not.
   - SRSFTimer_FTM_DRV_SetModuloCounterValue -This function configure the maximum counter value.
   - SRSFTimer_FTM_DRV_SetSync -This function configures sync mechanism for some FTM registers ( MOD, CNINT, HCR, CnV, OUTMASK, 
                INVCTRL, SWOCTRL).
   - SRSFTimer_FTM_DRV_InitOutputCompare -Configures the FTM to generate timed pulses(Output compare mode).
   - SRSFTimer_FTM_DRV_DeinitOutputCompare -Disables compare match output control and clears FTM timer configuration.
   - SRSFTimer_FTM_DRV_UpdateOutputCompareChannel -Sets the next compare match value based on the current counter value.
   - SRSFTimer_FTM_DRV_InitInputCapture -Configures Channel Input Capture for either getting time-stamps on edge detection or 
                on signal measurement . When the edge specified in the captureMode argument occurs on the channel the FTM 
                counter is captured into the CnV register. The user will have to read the CnV register separately to get this 
                value. The filter function is disabled if the filterVal argument passed in is 0. The filter function is 
                available only on channels 0,1,2,3.
   - SRSFTimer_FTM_DRV_DeinitInputCapture -Disables input capture mode and clears FTM timer configuration.
   - SRSFTimer_FTM_DRV_GetInputCaptureMeasurement -This function is used to calculate the measurement and/or time stamps values 
                which are read from the C(n, n+1)V registers and stored to the static buffers.
   - SRSFTimer_FTM_DRV_StartNewSignalMeasurement -Starts new single-shot signal measurement of the given channel.
   - SRSFTimer_FTM_DRV_QuadDecodeStart -Configures the quadrature mode and starts measurement.
   - SRSFTimer_FTM_DRV_QuadDecodeStop -De-activates the quadrature decode mode.
   - SRSFTimer_FTM_DRV_QuadGetState -Return the current quadrature decoder state (counter value, overflow flag and overflow 
                direction)
   - SRSFTimer_FTM_DRV_GetFrequency -Retrieves the frequency of the clock source feeding the FTM counter.
   - SRSFTimer_FTM_DRV_ConvertFreqToPeriodTicks -This function is used to covert the given frequency to period in ticks.

Module "flash1"    (component flash)
   - flash1_FLASH_DRV_Init -Flash initialization.
   - flash1_FLASH_DRV_GetPFlashProtection -P-Flash get protection.
   - flash1_FLASH_DRV_SetPFlashProtection -P-Flash set protection.
   - flash1_FLASH_DRV_GetSecurityState -Flash get security state.
   - flash1_FLASH_DRV_SecurityBypass -Flash security bypass.
   - flash1_FLASH_DRV_EraseAllBlock -Flash erase all Blocks.
   - flash1_FLASH_DRV_VerifyAllBlock -Flash verify all Blocks.
   - flash1_FLASH_DRV_EraseSector -Flash erase sector.
   - flash1_FLASH_DRV_VerifySection -Flash verify sector.
   - flash1_FLASH_DRV_EraseSuspend -Flash erase suspend.
   - flash1_FLASH_DRV_EraseResume -Flash erase resume.
   - flash1_FLASH_DRV_ReadOnce -Flash read once.
   - flash1_FLASH_DRV_ProgramOnce -Flash program once.
   - flash1_FLASH_DRV_Program -Flash program.
   - flash1_FLASH_DRV_ProgramCheck -Flash program check.
   - flash1_FLASH_DRV_CheckSum -Calculate check sum.
   - flash1_FLASH_DRV_ProgramSection -Flash program section.
   - flash1_FLASH_DRV_EraseBlock -Flash erase block.
   - flash1_FLASH_DRV_VerifyBlock -Flash verify block.
   - flash1_FLASH_DRV_GetEERAMProtection -EERAM get protection.
   - flash1_FLASH_DRV_SetEERAMProtection -EERAM set protection.
   - flash1_FLASH_DRV_SetFlexRamFunction -Flash Set FlexRam function command.
   - flash1_FLASH_DRV_EEEWrite -EEPROM Emulator Write.
   - flash1_FLASH_DRV_DEFlashPartition -Flash D/E-Flash Partition.
   - flash1_FLASH_DRV_GetDFlashProtection -D-Flash get protection.
   - flash1_FLASH_DRV_SetDFlashProtection -D-Flash set protection.
   - flash1_FLASH_DRV_PFlashSwap -swap between the two half of total logical P-Flash memory blocks within the memory map
   - flash1_FLASH_DRV_PFlashSwapCtl -implements swap control command corresponding with swap control code provided via swapcmd 
                parameter
   - flash1_FLASH_DRV_EraseAllBlockUnsecure -Flash erase all Blocks.

Module "pwrMan1"   (component power_manager)
   - pwrMan1_POWER_SYS_Init -Power manager initialization for operation.
   - pwrMan1_POWER_SYS_Deinit -This function deinitializes the Power manager.
   - pwrMan1_POWER_SYS_SetMode -This function configures the power mode.
   - pwrMan1_POWER_SYS_GetLastMode -This function returns power mode set as the last one.
   - pwrMan1_POWER_SYS_GetLastModeConfig -This function returns user configuration structure of power mode set as the last one.
   - pwrMan1_POWER_SYS_GetCurrentMode -This function returns currently running power mode.
   - pwrMan1_POWER_SYS_GetErrorCallbackIndex -This function returns the last failed notification callback.
   - pwrMan1_POWER_SYS_GetErrorCallback -This function returns the last failed notification callback configuration structure.

Module "lpi2c1"    (component lpi2c)
   - lpi2c1_LPI2C_DRV_MasterInit -Initialize the LPI2C master mode driver.
   - lpi2c1_LPI2C_DRV_MasterDeinit -De-initialize the LPI2C master mode driver.
   - lpi2c1_LPI2C_DRV_MasterGetBaudRate -Get the currently configured baud rate.
   - lpi2c1_LPI2C_DRV_MasterSetBaudRate -Set the baud rate for any subsequent I2C communication.
   - lpi2c1_LPI2C_DRV_MasterSetSlaveAddr -Set the slave address for any subsequent I2C communication.
   - lpi2c1_LPI2C_DRV_MasterSendData -Perform a non-blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterSendDataBlocking -Perform a blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterAbortTransferData -Abort a non-blocking I2C Master transmission or reception.
   - lpi2c1_LPI2C_DRV_MasterReceiveData -Perform a non-blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterReceiveDataBlocking -Perform a blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterGetTransferStatus -Return the current status of the I2C master transfer.
   - lpi2c1_LPI2C_DRV_MasterIRQHandler -Handle master operation when I2C interrupt occurs.
   - lpi2c1_LPI2C_DRV_SlaveInit -Initialize the I2C slave mode driver.
   - lpi2c1_LPI2C_DRV_SlaveDeinit -De-initialize the I2C slave mode driver.
   - lpi2c1_LPI2C_DRV_SlaveSetTxBuffer -Provide a buffer for transmitting data.
   - lpi2c1_LPI2C_DRV_SlaveSetRxBuffer -Provide a buffer for receiving data.
   - lpi2c1_LPI2C_DRV_SlaveSendData -Perform a non-blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveSendDataBlocking -Perform a blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveReceiveData -Perform a non-blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveReceiveDataBlocking -Perform a blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveGetTransferStatus -Return the current status of the I2C slave transfer.
   - lpi2c1_LPI2C_DRV_SlaveAbortTransferData -Abort a non-blocking I2C Master transmission or reception.
   - lpi2c1_LPI2C_DRV_SlaveIRQHandler -Handle slave operation when I2C interrupt occurs.

Module "Cpu"       (component S32K144_100)
   - Cpu_SystemInit -This function disables the watchdog, enables FPU and the power mode protection. SystemInit is called from 
                startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock. It must be called whenever the core clock is changed during program execution
   - Cpu_SystemSoftwareReset -This method initiates initiate a system reset.

===================================================================================
